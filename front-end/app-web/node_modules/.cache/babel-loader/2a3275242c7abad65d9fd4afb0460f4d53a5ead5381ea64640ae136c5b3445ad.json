{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lucas\\\\Desktop\\\\allcode\\\\Full Stack CRUD App\\\\front-end\\\\app-web\\\\src\\\\pages\\\\UpdateCountry.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useParams, useNavigate, Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function UpdateCountry() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [country, setCountry] = useState({});\n  const navigate = useNavigate();\n  const updateCountry = async () => {\n    await fetch(\"http:localhost:4000/update-country/\" + country.id, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(country)\n    }).then(async data => {\n      const response = await data.json();\n      alert(response.success);\n    });\n  };\n  const handleFormChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setCountry(prevFormData => ({\n      ...prevFormData,\n      [name]: value\n    }));\n  };\n  useEffect(() => {\n    const getCountry = async () => {\n      const response = await fetch(`http://localhost:4000/get-country/${id}`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      // Only parse the response as JSON if there's content\n      if (response.status !== 204) {\n        const data = await response.json();\n        setCountry(data);\n      }\n    };\n    getCountry();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \" flex flex-col gap-4 pt-8\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl\",\n      children: \"Add new country\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      name: \"name\",\n      value: country.name,\n      onChange: handleFormChange,\n      type: \"text\",\n      placeholder: \"Country name\",\n      className: \"border-2 border-gray-300 rounded-xl\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      name: \"description\",\n      value: country.description,\n      onChange: handleFormChange,\n      type: \"text\",\n      placeholder: \"Description\",\n      className: \"border-2 border-gray-300 rounded-xl\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      name: \"image\",\n      value: country.image,\n      onChange: handleFormChange,\n      type: \"text\",\n      placeholder: \"ImageUrl\",\n      className: \"border-2 border-gray-300 rounded-xl\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: updateCountry,\n      className: \"px-4 py-2 bg-blue-500 hover:bg-blue-700 text-white rounded-xl\",\n      children: \"Update Country\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n}\n_s(UpdateCountry, \"yQrVLHfp2nd3PwV6dXVdBblNZPg=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = UpdateCountry;\nvar _c;\n$RefreshReg$(_c, \"UpdateCountry\");","map":{"version":3,"names":["useState","useEffect","useParams","useNavigate","Link","jsxDEV","_jsxDEV","UpdateCountry","_s","id","country","setCountry","navigate","updateCountry","fetch","method","headers","body","JSON","stringify","then","data","response","json","alert","success","handleFormChange","e","name","value","target","prevFormData","getCountry","ok","Error","status","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","type","placeholder","description","image","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Lucas/Desktop/allcode/Full Stack CRUD App/front-end/app-web/src/pages/UpdateCountry.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate, Link } from 'react-router-dom';\r\n\r\nexport default function UpdateCountry() {\r\n    const {id} = useParams();\r\n    const [country, setCountry] = useState({});\r\n    const navigate = useNavigate();\r\n\r\n    const updateCountry = async () => {\r\n        \r\n        await fetch(\"http:localhost:4000/update-country/\" + country.id, {\r\n            method: \"PATCH\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(country)\r\n        }).then(async (data) => {\r\n            const response = await data.json();\r\n            alert(response.success);\r\n         \r\n        });\r\n    }\r\n    const handleFormChange = (e) => {\r\n        const {name, value} = e.target;\r\n        setCountry((prevFormData) => ({\r\n            ...prevFormData,\r\n            [name]: value\r\n        }));\r\n    }\r\n    useEffect(() => {\r\n        const getCountry = async () => {\r\n            const response = await fetch(`http://localhost:4000/get-country/${id}`);\r\n            if (!response.ok) {\r\n                throw new Error('Network response was not ok');\r\n            }\r\n            // Only parse the response as JSON if there's content\r\n            if (response.status !== 204) {\r\n                const data = await response.json();\r\n                setCountry(data);\r\n            }\r\n        }\r\n        getCountry();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\" flex flex-col gap-4 pt-8\">\r\n            <h2 className=\"text-xl\">Add new country</h2>\r\n            <input name=\"name\" value={country.name} onChange={handleFormChange} type=\"text\" placeholder=\"Country name\" className=\"border-2 border-gray-300 rounded-xl\" />\r\n            <input name=\"description\" value={country.description} onChange={handleFormChange} type=\"text\" placeholder=\"Description\" className=\"border-2 border-gray-300 rounded-xl\" />\r\n            <input name=\"image\" value={country.image} onChange={handleFormChange} type=\"text\" placeholder=\"ImageUrl\" className=\"border-2 border-gray-300 rounded-xl\" />\r\n            <button onClick={updateCountry} className=\"px-4 py-2 bg-blue-500 hover:bg-blue-700 text-white rounded-xl\">Update Country</button>\r\n        </div>\r\n    )   \r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}