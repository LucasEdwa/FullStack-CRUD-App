{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lucas\\\\Desktop\\\\allcode\\\\Full Stack CRUD App\\\\front-end\\\\app-web\\\\src\\\\pages\\\\Country.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useParams, useNavigate, Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Country() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [country, setCountry] = useState({});\n  const navigate = useNavigate();\n  const deleteCountry = async () => {\n    await fetch(`http://localhost:4000/delete-country/` + id, {\n      method: \"DELETE\"\n    }).then(async data => {\n      const response = await data.json();\n      if (response.success) {\n        navigate(\"/\");\n      }\n    });\n  };\n  useEffect(() => {\n    const getCountry = async () => {\n      const response = await fetch(`http://localhost:4000/get-country/${id}`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      // Only parse the response as JSON if there's content\n      if (response.status !== 204) {\n        const data = await response.json();\n        setCountry(data);\n      }\n    };\n    getCountry();\n  }, [id]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col pt-8 gap-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: country.image,\n      className: \"w-full h-80 object-cover \",\n      alt: \"no pic added\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-between items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-xl font-semibold\",\n        children: country.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex gap-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: deleteCountry,\n          className: \"bg-red-500 py-2 px-4 text-white rounded-xl\",\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: '/update-country/' + country.id,\n          className: \"bg-blue-500 py-2 px-4 text-white rounded-xl\",\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: country.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n_s(Country, \"yQrVLHfp2nd3PwV6dXVdBblNZPg=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = Country;\nvar _c;\n$RefreshReg$(_c, \"Country\");","map":{"version":3,"names":["useState","useEffect","useParams","useNavigate","Link","jsxDEV","_jsxDEV","Country","_s","id","country","setCountry","navigate","deleteCountry","fetch","method","then","data","response","json","success","getCountry","ok","Error","status","className","children","src","image","alt","fileName","_jsxFileName","lineNumber","columnNumber","name","onClick","to","description","_c","$RefreshReg$"],"sources":["C:/Users/Lucas/Desktop/allcode/Full Stack CRUD App/front-end/app-web/src/pages/Country.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate, Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Country() {\r\n    const {id} = useParams();\r\n\r\n    const [country, setCountry] = useState({});\r\n\r\n    const navigate = useNavigate();\r\n    const deleteCountry = async () => {\r\n        await fetch(`http://localhost:4000/delete-country/`+ id, {\r\n            method: \"DELETE\",\r\n        }).then(async (data) => {\r\n            const response = await data.json();\r\n            if (response.success) {\r\n                navigate(\"/\");\r\n            }\r\n        });\r\n        \r\n    }\r\n\r\n    useEffect(()=> {\r\n        const getCountry = async () => {\r\n            const response = await fetch(`http://localhost:4000/get-country/${id}`);\r\n            if (!response.ok) {\r\n                throw new Error('Network response was not ok');\r\n            }\r\n            // Only parse the response as JSON if there's content\r\n            if (response.status !== 204) {\r\n                const data = await response.json();\r\n                setCountry(data);\r\n            }\r\n        }\r\n        getCountry();\r\n    }, [id]);\r\n    return (\r\n        <div className=\"flex flex-col pt-8 gap-6\">\r\n            <img src={country.image} className=\"w-full h-80 object-cover \" alt='no pic added'/>\r\n            <div className=\"flex justify-between items-center\">\r\n                <h1 className=\"text-xl font-semibold\">{country.name}</h1>\r\n                <div className=\"flex gap-2\">\r\n                    <button onClick={deleteCountry} className=\"bg-red-500 py-2 px-4 text-white rounded-xl\">Delete</button>\r\n                    <Link to={'/update-country/'+ country.id} className=\"bg-blue-500 py-2 px-4 text-white rounded-xl\">Edit</Link>\r\n\r\n                </div>  \r\n            </div>\r\n         \r\n            <p>{country.description}</p>\r\n        </div>\r\n    )\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}